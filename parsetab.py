
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'startARRAY AS ASS_ADD ASS_DIV ASS_MOD ASS_MUL ASS_SUB BOOL_LITERAL BREAK CLOSETAG CONTINUE DNUM_LITERAL DOUBLE_STRING ECHO ELSE ELSEIF FOREACH GLOBAL IDENTIFIER IF KEYWORDS LNUM_LITERAL NEW OPENTAG OP_DEC OP_EQ OP_GE OP_IDENTICAL OP_INC OP_LAND OP_LE OP_LOR OP_NE OP_NOTIDENTICAL OP_XOR PRINT REQUIRE RETURN SINGLE_STRING STATIC WHILEargs : IDENTIFIER\n\t\t\t| LNUM_LITERAL\n\t\t\t| DNUM_LITERAL\n\t\t\t| SINGLE_STRING\n\t\t\t| DOUBLE_STRING\n\t\t\t| BOOL_LITERAL\n\t\t\t| postfixExpr\n\t\t\t| prefixExpr\n\tMultiplicativeExpression : args\n    | MultiplicativeExpression \'*\' args\n\t| MultiplicativeExpression \'/\' args\n\t| MultiplicativeExpression \'%\' args\n    AdditiveExpression : MultiplicativeExpression\n        | AdditiveExpression \'+\' MultiplicativeExpression\n        | AdditiveExpression \'-\' MultiplicativeExpression\n     ArrayExpression : \'[\' args \',\' args \']\'\n\t arithmeticExp : AdditiveExpression\n\t\t\t\t\t\t| MultiplicativeExpression\n\t\t\t\t\t\t| ArrayExpression\n\tstart : OPENTAG statementstates : assignment\n\t\t\t  | postfixExpr ";"\n\t\t\t  | prefixExpr ";"\n\t\t\t  | whileLoop\n\t\t\t  | forEach\n\t\t\t  | return\n\t\t\t  | break\n\t\t\t  | continue\n\t\t\t  | echo \n\t\t\t  | print\n\n\tstatement : states statement\n\t\t\t\t   | end\n\tassignmentOperator : \'=\'\n    | ASS_MUL\n    | ASS_DIV\n    | ASS_MOD\n    | ASS_ADD\n    | ASS_SUB\n    params : args\n\t\t\t  | args \',\' params\n\tassignment : IDENTIFIER assignmentOperator arithmeticExp ";"\n\t\t\t\t\t| IDENTIFIER \'=\' \'[\' params \']\' \';\'\n\t\t\t\t  \n\tpostfixExpr : IDENTIFIER OP_INC\n\tpostfixExpr : IDENTIFIER OP_DEC \n\tprefixExpr : OP_INC IDENTIFIER\n\tprefixExpr : OP_DEC IDENTIFIER \n\twhileLoop : WHILE \'(\' conditionalExp \')\' \'{\' block \'}\'\n\tforEach : FOREACH \'(\' IDENTIFIER AS IDENTIFIER \')\' \'{\' block \'}\'\n\tconditionalOp : OP_GE\n\t\t\t\t\t | OP_LE\n\t\t\t\t\t | OP_IDENTICAL\n\t\t\t\t\t | OP_NOTIDENTICAL\n\t\t\t\t\t | OP_EQ\n\t\t\t\t\t | OP_NE\n\t\t\t\t\t | \'<\'\n\t\t\t\t\t | \'>\'\n\tconditionalExp : condArgs conditionalOp condArgs\n\t\t\t\t\t  | condArgs\n\t\t\t\t\t  | conditionalExp logicalOp conditionalExp\n\t\t\t\t\t  | \'(\' conditionalExp \')\' logicalOp \'(\' conditionalExp \')\'\n\t\t\t\t\t  | \'(\' conditionalExp \')\' logicalOp conditionalExp\n\t\t\t\t\t  | conditionalExp logicalOp \'(\' conditionalExp \')\'\n\tlogicalOp : OP_LAND\n\t\t\t\t | OP_LOR\n\t\t\t\t | OP_XOR\n\t condArgs : arithmeticExp\n\t\t\t\t | IDENTIFIER\n\t\t\t\t | LNUM_LITERAL\n\t\t\t\t | DNUM_LITERAL\n\tblock : states block\n\t\t\t |\n\treturn : RETURN ";"\n\t\t\t  | RETURN arithmeticExp ";"\n\tbreak : BREAK ";"\n\tcontinue : CONTINUE ";"\n\techo : ECHO ";"\n\t\t\t| ECHO arithmeticExp ";"\n\tprint : PRINT arithmeticExp ";"\n\t\t\t | PRINT \'(\' arithmeticExp \')\' \';\'\n\tend : CLOSETAG'
    
_lr_action_items = {'IDENTIFIER':([2,3,6,7,10,12,13,14,15,17,18,20,23,24,25,27,28,29,30,31,32,34,36,45,47,53,55,57,58,59,60,63,65,66,67,68,69,72,73,74,80,83,84,91,94,95,96,97,98,99,100,101,102,105,106,107,108,109,111,112,116,117,120,123,124,128,131,133,137,],[4,-29,37,37,4,-27,56,-25,-28,-26,-30,-24,-21,61,37,37,-38,-33,-35,-34,-37,-36,-23,37,37,-72,-22,75,82,-74,-75,-76,37,-78,37,37,37,37,37,-73,75,-77,-41,37,-52,-56,-49,-54,-51,-50,75,-55,-53,-64,-63,75,-65,119,37,-79,4,75,-42,75,4,75,-47,4,-48,]),'BREAK':([2,3,10,12,14,15,17,18,20,23,36,53,55,59,60,63,66,74,83,84,112,116,120,124,131,133,137,],[21,-29,21,-27,-25,-28,-26,-30,-24,-21,-23,-72,-22,-74,-75,-76,-78,-73,-77,-41,-79,21,-42,21,-47,21,-48,]),'PRINT':([2,3,10,12,14,15,17,18,20,23,36,53,55,59,60,63,66,74,83,84,112,116,120,124,131,133,137,],[6,-29,6,-27,-25,-28,-26,-30,-24,-21,-23,-72,-22,-74,-75,-76,-78,-73,-77,-41,-79,6,-42,6,-47,6,-48,]),'RETURN':([2,3,10,12,14,15,17,18,20,23,36,53,55,59,60,63,66,74,83,84,112,116,120,124,131,133,137,],[7,-29,7,-27,-25,-28,-26,-30,-24,-21,-23,-72,-22,-74,-75,-76,-78,-73,-77,-41,-79,7,-42,7,-47,7,-48,]),'OP_IDENTICAL':([33,35,37,38,40,41,42,43,44,46,48,49,50,51,56,61,75,76,77,78,79,87,88,89,92,93,122,],[-43,-44,-1,-8,-2,-19,-7,-3,-13,-5,-4,-6,-9,-17,-46,-45,-1,-66,-2,-3,98,-12,-11,-10,-14,-15,-16,]),'OP_NOTIDENTICAL':([33,35,37,38,40,41,42,43,44,46,48,49,50,51,56,61,75,76,77,78,79,87,88,89,92,93,122,],[-43,-44,-1,-8,-2,-19,-7,-3,-13,-5,-4,-6,-9,-17,-46,-45,-1,-66,-2,-3,94,-12,-11,-10,-14,-15,-16,]),'>':([33,35,37,38,40,41,42,43,44,46,48,49,50,51,56,61,75,76,77,78,79,87,88,89,92,93,122,],[-43,-44,-1,-8,-2,-19,-7,-3,-13,-5,-4,-6,-9,-17,-46,-45,-1,-66,-2,-3,95,-12,-11,-10,-14,-15,-16,]),'}':([3,12,14,15,17,18,20,23,36,53,55,59,60,63,66,74,83,84,112,116,120,124,125,130,131,133,135,137,],[-29,-27,-25,-28,-26,-30,-24,-21,-23,-72,-22,-74,-75,-76,-78,-73,-77,-41,-79,-71,-42,-71,131,-70,-47,-71,137,-48,]),'CONTINUE':([2,3,10,12,14,15,17,18,20,23,36,53,55,59,60,63,66,74,83,84,112,116,120,124,131,133,137,],[22,-29,22,-27,-25,-28,-26,-30,-24,-21,-23,-72,-22,-74,-75,-76,-78,-73,-77,-41,-79,22,-42,22,-47,22,-48,]),'+':([33,35,37,38,40,42,43,44,46,48,49,50,51,56,61,75,77,78,87,88,89,92,93,],[-43,-44,-1,-8,-2,-7,-3,-13,-5,-4,-6,-9,72,-46,-45,-1,-2,-3,-12,-11,-10,-14,-15,]),'OPENTAG':([0,],[2,]),'OP_LOR':([33,35,37,38,40,41,42,43,44,46,48,49,50,51,56,61,75,76,77,78,79,81,87,88,89,92,93,103,114,115,118,122,126,129,132,134,136,],[-43,-44,-1,-8,-2,-19,-7,-3,-13,-5,-4,-6,-9,-17,-46,-45,-1,-66,-2,-3,-58,105,-12,-11,-10,-14,-15,105,-57,105,105,-16,105,105,105,105,105,]),'OP_LAND':([33,35,37,38,40,41,42,43,44,46,48,49,50,51,56,61,75,76,77,78,79,81,87,88,89,92,93,103,114,115,118,122,126,129,132,134,136,],[-43,-44,-1,-8,-2,-19,-7,-3,-13,-5,-4,-6,-9,-17,-46,-45,-1,-66,-2,-3,-58,106,-12,-11,-10,-14,-15,106,-57,106,106,-16,106,106,106,106,106,]),'(':([6,16,19,57,80,105,106,107,108,117,123,128,],[45,57,58,80,80,-64,-63,117,-65,80,128,80,]),'WHILE':([2,3,10,12,14,15,17,18,20,23,36,53,55,59,60,63,66,74,83,84,112,116,120,124,131,133,137,],[16,-29,16,-27,-25,-28,-26,-30,-24,-21,-23,-72,-22,-74,-75,-76,-78,-73,-77,-41,-79,16,-42,16,-47,16,-48,]),'[':([6,7,25,27,28,29,30,31,32,34,45,57,80,94,95,96,97,98,99,100,101,102,105,106,107,108,117,123,128,],[47,47,47,47,-38,65,-35,-34,-37,-36,47,47,47,-52,-56,-49,-54,-51,-50,47,-55,-53,-64,-63,47,-65,47,47,47,]),'BOOL_LITERAL':([6,7,25,27,28,29,30,31,32,34,45,47,57,65,67,68,69,72,73,80,91,94,95,96,97,98,99,100,101,102,105,106,107,108,111,117,123,128,],[49,49,49,49,-38,-33,-35,-34,-37,-36,49,49,49,49,49,49,49,49,49,49,49,-52,-56,-49,-54,-51,-50,49,-55,-53,-64,-63,49,-65,49,49,49,49,]),'*':([33,35,37,38,40,42,43,44,46,48,49,50,56,61,75,77,78,87,88,89,92,93,],[-43,-44,-1,-8,-2,-7,-3,69,-5,-4,-6,-9,-46,-45,-1,-2,-3,-12,-11,-10,69,69,]),'<':([33,35,37,38,40,41,42,43,44,46,48,49,50,51,56,61,75,76,77,78,79,87,88,89,92,93,122,],[-43,-44,-1,-8,-2,-19,-7,-3,-13,-5,-4,-6,-9,-17,-46,-45,-1,-66,-2,-3,101,-12,-11,-10,-14,-15,-16,]),']':([33,35,37,38,40,42,43,46,48,49,56,61,85,86,113,121,],[-43,-44,-1,-8,-2,-7,-3,-5,-4,-6,-46,-45,110,-39,122,-40,]),'ASS_MOD':([4,],[34,]),'AS':([82,],[109,]),'OP_NE':([33,35,37,38,40,41,42,43,44,46,48,49,50,51,56,61,75,76,77,78,79,87,88,89,92,93,122,],[-43,-44,-1,-8,-2,-19,-7,-3,-13,-5,-4,-6,-9,-17,-46,-45,-1,-66,-2,-3,97,-12,-11,-10,-14,-15,-16,]),'$end':([1,8,9,26,54,],[0,-32,-80,-20,-31,]),'OP_LE':([33,35,37,38,40,41,42,43,44,46,48,49,50,51,56,61,75,76,77,78,79,87,88,89,92,93,122,],[-43,-44,-1,-8,-2,-19,-7,-3,-13,-5,-4,-6,-9,-17,-46,-45,-1,-66,-2,-3,99,-12,-11,-10,-14,-15,-16,]),'ASS_ADD':([4,],[32,]),'ECHO':([2,3,10,12,14,15,17,18,20,23,36,53,55,59,60,63,66,74,83,84,112,116,120,124,131,133,137,],[25,-29,25,-27,-25,-28,-26,-30,-24,-21,-23,-72,-22,-74,-75,-76,-78,-73,-77,-41,-79,25,-42,25,-47,25,-48,]),'ASS_SUB':([4,],[28,]),')':([33,35,37,38,40,41,42,43,44,46,48,49,50,51,56,61,70,75,76,77,78,79,81,87,88,89,92,93,103,114,118,119,122,126,129,132,134,136,],[-43,-44,-1,-8,-2,-19,-7,-3,-13,-5,-4,-6,-9,-17,-46,-45,90,-1,-66,-2,-3,-58,104,-12,-11,-10,-14,-15,115,-57,-59,127,-16,132,-61,-62,136,-60,]),'ASS_DIV':([4,],[30,]),'CLOSETAG':([2,3,10,12,14,15,17,18,20,23,36,53,55,59,60,63,66,74,83,84,112,120,131,137,],[9,-29,9,-27,-25,-28,-26,-30,-24,-21,-23,-72,-22,-74,-75,-76,-78,-73,-77,-41,-79,-42,-47,-48,]),'LNUM_LITERAL':([6,7,25,27,28,29,30,31,32,34,45,47,57,65,67,68,69,72,73,80,91,94,95,96,97,98,99,100,101,102,105,106,107,108,111,117,123,128,],[40,40,40,40,-38,-33,-35,-34,-37,-36,40,40,77,40,40,40,40,40,40,77,40,-52,-56,-49,-54,-51,-50,77,-55,-53,-64,-63,77,-65,40,77,77,77,]),'OP_EQ':([33,35,37,38,40,41,42,43,44,46,48,49,50,51,56,61,75,76,77,78,79,87,88,89,92,93,122,],[-43,-44,-1,-8,-2,-19,-7,-3,-13,-5,-4,-6,-9,-17,-46,-45,-1,-66,-2,-3,102,-12,-11,-10,-14,-15,-16,]),'DNUM_LITERAL':([6,7,25,27,28,29,30,31,32,34,45,47,57,65,67,68,69,72,73,80,91,94,95,96,97,98,99,100,101,102,105,106,107,108,111,117,123,128,],[43,43,43,43,-38,-33,-35,-34,-37,-36,43,43,78,43,43,43,43,43,43,78,43,-52,-56,-49,-54,-51,-50,78,-55,-53,-64,-63,78,-65,43,78,78,78,]),',':([33,35,37,38,40,42,43,46,48,49,56,61,71,86,],[-43,-44,-1,-8,-2,-7,-3,-5,-4,-6,-46,-45,91,111,]),';':([5,7,11,21,22,25,33,35,37,38,39,40,41,42,43,44,46,48,49,50,51,52,56,61,62,64,87,88,89,90,92,93,110,122,],[36,53,55,59,60,63,-43,-44,-1,-8,66,-2,-19,-7,-3,-13,-5,-4,-6,-9,-17,74,-46,-45,83,84,-12,-11,-10,112,-14,-15,120,-16,]),'OP_DEC':([2,3,4,6,7,10,12,14,15,17,18,20,23,25,27,28,29,30,31,32,34,36,37,45,47,53,55,57,59,60,63,65,66,67,68,69,72,73,74,75,80,83,84,91,94,95,96,97,98,99,100,101,102,105,106,107,108,111,112,116,117,120,123,124,128,131,133,137,],[13,-29,35,13,13,13,-27,-25,-28,-26,-30,-24,-21,13,13,-38,-33,-35,-34,-37,-36,-23,35,13,13,-72,-22,13,-74,-75,-76,13,-78,13,13,13,13,13,-73,35,13,-77,-41,13,-52,-56,-49,-54,-51,-50,13,-55,-53,-64,-63,13,-65,13,-79,13,13,-42,13,13,13,-47,13,-48,]),'DOUBLE_STRING':([6,7,25,27,28,29,30,31,32,34,45,47,57,65,67,68,69,72,73,80,91,94,95,96,97,98,99,100,101,102,105,106,107,108,111,117,123,128,],[46,46,46,46,-38,-33,-35,-34,-37,-36,46,46,46,46,46,46,46,46,46,46,46,-52,-56,-49,-54,-51,-50,46,-55,-53,-64,-63,46,-65,46,46,46,46,]),'OP_GE':([33,35,37,38,40,41,42,43,44,46,48,49,50,51,56,61,75,76,77,78,79,87,88,89,92,93,122,],[-43,-44,-1,-8,-2,-19,-7,-3,-13,-5,-4,-6,-9,-17,-46,-45,-1,-66,-2,-3,96,-12,-11,-10,-14,-15,-16,]),'=':([4,],[29,]),'FOREACH':([2,3,10,12,14,15,17,18,20,23,36,53,55,59,60,63,66,74,83,84,112,116,120,124,131,133,137,],[19,-29,19,-27,-25,-28,-26,-30,-24,-21,-23,-72,-22,-74,-75,-76,-78,-73,-77,-41,-79,19,-42,19,-47,19,-48,]),'{':([104,127,],[116,133,]),'SINGLE_STRING':([6,7,25,27,28,29,30,31,32,34,45,47,57,65,67,68,69,72,73,80,91,94,95,96,97,98,99,100,101,102,105,106,107,108,111,117,123,128,],[48,48,48,48,-38,-33,-35,-34,-37,-36,48,48,48,48,48,48,48,48,48,48,48,-52,-56,-49,-54,-51,-50,48,-55,-53,-64,-63,48,-65,48,48,48,48,]),'OP_XOR':([33,35,37,38,40,41,42,43,44,46,48,49,50,51,56,61,75,76,77,78,79,81,87,88,89,92,93,103,114,115,118,122,126,129,132,134,136,],[-43,-44,-1,-8,-2,-19,-7,-3,-13,-5,-4,-6,-9,-17,-46,-45,-1,-66,-2,-3,-58,108,-12,-11,-10,-14,-15,108,-57,108,108,-16,108,108,108,108,108,]),'ASS_MUL':([4,],[31,]),'OP_INC':([2,3,4,6,7,10,12,14,15,17,18,20,23,25,27,28,29,30,31,32,34,36,37,45,47,53,55,57,59,60,63,65,66,67,68,69,72,73,74,75,80,83,84,91,94,95,96,97,98,99,100,101,102,105,106,107,108,111,112,116,117,120,123,124,128,131,133,137,],[24,-29,33,24,24,24,-27,-25,-28,-26,-30,-24,-21,24,24,-38,-33,-35,-34,-37,-36,-23,33,24,24,-72,-22,24,-74,-75,-76,24,-78,24,24,24,24,24,-73,33,24,-77,-41,24,-52,-56,-49,-54,-51,-50,24,-55,-53,-64,-63,24,-65,24,-79,24,24,-42,24,24,24,-47,24,-48,]),'/':([33,35,37,38,40,42,43,44,46,48,49,50,56,61,75,77,78,87,88,89,92,93,],[-43,-44,-1,-8,-2,-7,-3,68,-5,-4,-6,-9,-46,-45,-1,-2,-3,-12,-11,-10,68,68,]),'%':([33,35,37,38,40,42,43,44,46,48,49,50,56,61,75,77,78,87,88,89,92,93,],[-43,-44,-1,-8,-2,-7,-3,67,-5,-4,-6,-9,-46,-45,-1,-2,-3,-12,-11,-10,67,67,]),'-':([33,35,37,38,40,42,43,44,46,48,49,50,51,56,61,75,77,78,87,88,89,92,93,],[-43,-44,-1,-8,-2,-7,-3,-13,-5,-4,-6,-9,73,-46,-45,-1,-2,-3,-12,-11,-10,-14,-15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'echo':([2,10,116,124,133,],[3,3,3,3,3,]),'prefixExpr':([2,6,7,10,25,27,45,47,57,65,67,68,69,72,73,80,91,100,107,111,116,117,123,124,128,133,],[5,38,38,5,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,5,38,38,5,38,5,]),'arithmeticExp':([6,7,25,27,45,57,80,100,107,117,123,128,],[39,52,62,64,70,76,76,76,76,76,76,76,]),'end':([2,10,],[8,8,]),'block':([116,124,133,],[125,130,135,]),'assignmentOperator':([4,],[27,]),'states':([2,10,116,124,133,],[10,10,124,124,124,]),'ArrayExpression':([6,7,25,27,45,57,80,100,107,117,123,128,],[41,41,41,41,41,41,41,41,41,41,41,41,]),'postfixExpr':([2,6,7,10,25,27,45,47,57,65,67,68,69,72,73,80,91,100,107,111,116,117,123,124,128,133,],[11,42,42,11,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,11,42,42,11,42,11,]),'start':([0,],[1,]),'condArgs':([57,80,100,107,117,123,128,],[79,79,114,79,79,79,79,]),'break':([2,10,116,124,133,],[12,12,12,12,12,]),'forEach':([2,10,116,124,133,],[14,14,14,14,14,]),'params':([65,111,],[85,121,]),'continue':([2,10,116,124,133,],[15,15,15,15,15,]),'return':([2,10,116,124,133,],[17,17,17,17,17,]),'print':([2,10,116,124,133,],[18,18,18,18,18,]),'whileLoop':([2,10,116,124,133,],[20,20,20,20,20,]),'args':([6,7,25,27,45,47,57,65,67,68,69,72,73,80,91,100,107,111,117,123,128,],[50,50,50,50,50,71,50,86,87,88,89,50,50,50,113,50,50,86,50,50,50,]),'MultiplicativeExpression':([6,7,25,27,45,57,72,73,80,100,107,117,123,128,],[44,44,44,44,44,44,92,93,44,44,44,44,44,44,]),'AdditiveExpression':([6,7,25,27,45,57,80,100,107,117,123,128,],[51,51,51,51,51,51,51,51,51,51,51,51,]),'assignment':([2,10,116,124,133,],[23,23,23,23,23,]),'logicalOp':([81,103,115,118,126,129,132,134,136,],[107,107,123,107,107,107,123,107,123,]),'conditionalOp':([79,],[100,]),'statement':([2,10,],[26,54,]),'conditionalExp':([57,80,107,117,123,128,],[81,103,118,126,129,134,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('args -> IDENTIFIER','args',1,'p_args','php_yacc.py',40),
  ('args -> LNUM_LITERAL','args',1,'p_args','php_yacc.py',41),
  ('args -> DNUM_LITERAL','args',1,'p_args','php_yacc.py',42),
  ('args -> SINGLE_STRING','args',1,'p_args','php_yacc.py',43),
  ('args -> DOUBLE_STRING','args',1,'p_args','php_yacc.py',44),
  ('args -> BOOL_LITERAL','args',1,'p_args','php_yacc.py',45),
  ('args -> postfixExpr','args',1,'p_args','php_yacc.py',46),
  ('args -> prefixExpr','args',1,'p_args','php_yacc.py',47),
  ('MultiplicativeExpression -> args','MultiplicativeExpression',1,'p_MultiplicativeExpression','php_yacc.py',52),
  ('MultiplicativeExpression -> MultiplicativeExpression * args','MultiplicativeExpression',3,'p_MultiplicativeExpression','php_yacc.py',53),
  ('MultiplicativeExpression -> MultiplicativeExpression / args','MultiplicativeExpression',3,'p_MultiplicativeExpression','php_yacc.py',54),
  ('MultiplicativeExpression -> MultiplicativeExpression % args','MultiplicativeExpression',3,'p_MultiplicativeExpression','php_yacc.py',55),
  ('AdditiveExpression -> MultiplicativeExpression','AdditiveExpression',1,'p_AdditiveExpression','php_yacc.py',83),
  ('AdditiveExpression -> AdditiveExpression + MultiplicativeExpression','AdditiveExpression',3,'p_AdditiveExpression','php_yacc.py',84),
  ('AdditiveExpression -> AdditiveExpression - MultiplicativeExpression','AdditiveExpression',3,'p_AdditiveExpression','php_yacc.py',85),
  ('ArrayExpression -> [ args , args ]','ArrayExpression',5,'p_ArrayExpression','php_yacc.py',110),
  ('arithmeticExp -> AdditiveExpression','arithmeticExp',1,'p_arithmeticExp','php_yacc.py',114),
  ('arithmeticExp -> MultiplicativeExpression','arithmeticExp',1,'p_arithmeticExp','php_yacc.py',115),
  ('arithmeticExp -> ArrayExpression','arithmeticExp',1,'p_arithmeticExp','php_yacc.py',116),
  ('start -> OPENTAG statement','start',2,'p_start','php_yacc.py',122),
  ('states -> assignment','states',1,'p_states','php_yacc.py',125),
  ('states -> postfixExpr ;','states',2,'p_states','php_yacc.py',126),
  ('states -> prefixExpr ;','states',2,'p_states','php_yacc.py',127),
  ('states -> whileLoop','states',1,'p_states','php_yacc.py',128),
  ('states -> forEach','states',1,'p_states','php_yacc.py',129),
  ('states -> return','states',1,'p_states','php_yacc.py',130),
  ('states -> break','states',1,'p_states','php_yacc.py',131),
  ('states -> continue','states',1,'p_states','php_yacc.py',132),
  ('states -> echo','states',1,'p_states','php_yacc.py',133),
  ('states -> print','states',1,'p_states','php_yacc.py',134),
  ('statement -> states statement','statement',2,'p_statement','php_yacc.py',139),
  ('statement -> end','statement',1,'p_statement','php_yacc.py',140),
  ('assignmentOperator -> =','assignmentOperator',1,'p_assignmentOperator','php_yacc.py',145),
  ('assignmentOperator -> ASS_MUL','assignmentOperator',1,'p_assignmentOperator','php_yacc.py',146),
  ('assignmentOperator -> ASS_DIV','assignmentOperator',1,'p_assignmentOperator','php_yacc.py',147),
  ('assignmentOperator -> ASS_MOD','assignmentOperator',1,'p_assignmentOperator','php_yacc.py',148),
  ('assignmentOperator -> ASS_ADD','assignmentOperator',1,'p_assignmentOperator','php_yacc.py',149),
  ('assignmentOperator -> ASS_SUB','assignmentOperator',1,'p_assignmentOperator','php_yacc.py',150),
  ('params -> args','params',1,'p_params','php_yacc.py',155),
  ('params -> args , params','params',3,'p_params','php_yacc.py',156),
  ('assignment -> IDENTIFIER assignmentOperator arithmeticExp ;','assignment',4,'p_assignment','php_yacc.py',161),
  ('assignment -> IDENTIFIER = [ params ] ;','assignment',6,'p_assignment','php_yacc.py',162),
  ('postfixExpr -> IDENTIFIER OP_INC','postfixExpr',2,'p_postfixExprInc','php_yacc.py',202),
  ('postfixExpr -> IDENTIFIER OP_DEC','postfixExpr',2,'p_postfixExprDec','php_yacc.py',214),
  ('prefixExpr -> OP_INC IDENTIFIER','prefixExpr',2,'p_prefixExprInc','php_yacc.py',226),
  ('prefixExpr -> OP_DEC IDENTIFIER','prefixExpr',2,'p_prefixExprDec','php_yacc.py',238),
  ('whileLoop -> WHILE ( conditionalExp ) { block }','whileLoop',7,'p_whileLoop','php_yacc.py',250),
  ('forEach -> FOREACH ( IDENTIFIER AS IDENTIFIER ) { block }','forEach',9,'p_forEach','php_yacc.py',254),
  ('conditionalOp -> OP_GE','conditionalOp',1,'p_conditionalOp','php_yacc.py',258),
  ('conditionalOp -> OP_LE','conditionalOp',1,'p_conditionalOp','php_yacc.py',259),
  ('conditionalOp -> OP_IDENTICAL','conditionalOp',1,'p_conditionalOp','php_yacc.py',260),
  ('conditionalOp -> OP_NOTIDENTICAL','conditionalOp',1,'p_conditionalOp','php_yacc.py',261),
  ('conditionalOp -> OP_EQ','conditionalOp',1,'p_conditionalOp','php_yacc.py',262),
  ('conditionalOp -> OP_NE','conditionalOp',1,'p_conditionalOp','php_yacc.py',263),
  ('conditionalOp -> <','conditionalOp',1,'p_conditionalOp','php_yacc.py',264),
  ('conditionalOp -> >','conditionalOp',1,'p_conditionalOp','php_yacc.py',265),
  ('conditionalExp -> condArgs conditionalOp condArgs','conditionalExp',3,'p_conditionalExp','php_yacc.py',269),
  ('conditionalExp -> condArgs','conditionalExp',1,'p_conditionalExp','php_yacc.py',270),
  ('conditionalExp -> conditionalExp logicalOp conditionalExp','conditionalExp',3,'p_conditionalExp','php_yacc.py',271),
  ('conditionalExp -> ( conditionalExp ) logicalOp ( conditionalExp )','conditionalExp',7,'p_conditionalExp','php_yacc.py',272),
  ('conditionalExp -> ( conditionalExp ) logicalOp conditionalExp','conditionalExp',5,'p_conditionalExp','php_yacc.py',273),
  ('conditionalExp -> conditionalExp logicalOp ( conditionalExp )','conditionalExp',5,'p_conditionalExp','php_yacc.py',274),
  ('logicalOp -> OP_LAND','logicalOp',1,'p_logicalOp','php_yacc.py',278),
  ('logicalOp -> OP_LOR','logicalOp',1,'p_logicalOp','php_yacc.py',279),
  ('logicalOp -> OP_XOR','logicalOp',1,'p_logicalOp','php_yacc.py',280),
  ('condArgs -> arithmeticExp','condArgs',1,'p_condArgs','php_yacc.py',284),
  ('condArgs -> IDENTIFIER','condArgs',1,'p_condArgs','php_yacc.py',285),
  ('condArgs -> LNUM_LITERAL','condArgs',1,'p_condArgs','php_yacc.py',286),
  ('condArgs -> DNUM_LITERAL','condArgs',1,'p_condArgs','php_yacc.py',287),
  ('block -> states block','block',2,'p_block','php_yacc.py',291),
  ('block -> <empty>','block',0,'p_block','php_yacc.py',292),
  ('return -> RETURN ;','return',2,'p_return','php_yacc.py',296),
  ('return -> RETURN arithmeticExp ;','return',3,'p_return','php_yacc.py',297),
  ('break -> BREAK ;','break',2,'p_break','php_yacc.py',302),
  ('continue -> CONTINUE ;','continue',2,'p_continue','php_yacc.py',306),
  ('echo -> ECHO ;','echo',2,'p_echo','php_yacc.py',310),
  ('echo -> ECHO arithmeticExp ;','echo',3,'p_echo','php_yacc.py',311),
  ('print -> PRINT arithmeticExp ;','print',3,'p_print','php_yacc.py',315),
  ('print -> PRINT ( arithmeticExp ) ;','print',5,'p_print','php_yacc.py',316),
  ('end -> CLOSETAG','end',1,'p_end','php_yacc.py',320),
]
